#Generated by VisualGDB project wizard. 
#Note: VisualGDB will automatically update this file when you add new sources to the project.
#All other changes you make in this file will be preserved.
#Visit http://visualgdb.com/makefiles for more details

#VisualGDB: AutoSourceFiles		#<--- remove this line to disable auto-updating of SOURCEFILES and EXTERNAL_LIBS

TARGETNAME := dfbp
#TARGETTYPE can be APP, STATIC or SHARED
TARGETTYPE := APP

to_lowercase = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

CONFIG ?= RELEASE

CONFIGURATION_FLAGS_FILE := $(call to_lowercase,$(CONFIG)).mak
TOOLCHAIN_ROOT ?= $(toolchain_root)

include $(CONFIGURATION_FLAGS_FILE)

#LINKER_SCRIPT defined inside the configuration file (e.g. debug.mak) should override any linker scripts defined in shared .mak files
CONFIGURATION_LINKER_SCRIPT := $(LINKER_SCRIPT)

include $(ADDITIONAL_MAKE_FILES)

############################################################################
HOME=$(shell echo ~)
#$(info Path=$(shell echo $(PATH)))
#$(info LibPath=$(shell echo $(LD_LIBRARY_PATH)))
HOST_ARCH:=$(shell uname -m)
HOST_OS:=$(shell uname -s 2>/dev/null | tr "[:upper:]" "[:lower:]")
HOST_NAME=$(shell hostname)

ifeq ($(findstring .abci.,$(HOST_NAME)),.abci.)
	INTEL_HOME=/apps/intel/2020.4/compilers_and_libraries_2020.4.304/linux/
	MPI_HOME=$(INTEL_HOME)/mpi
	IPP_HOME=$(INTEL_HOME)/ipp
	CUDA_HOME=/apps/cuda/10.2.89
	CC := $(MPI_HOME)/intel64/bin/mpicc
	CXX := $(MPI_HOME)/intel64/bin/mpicxx
	LD := $(CXX)
	LIBRARY_DIRS += $(MPI_HOME)/intel64/lib $(IPP_HOME)/lib/intel64
	INCLUDE_DIRS += $(MPI_HOME)/intel64/include $(IPP_HOME)/include $(CUDA_HOME)/include
else
	INTEL_HOME=$(HOME)/local/intel/compilers_and_libraries_2018.1.163/linux
	MPI_HOME=$(INTEL_HOME)/mpi
	IPP_HOME=$(INTEL_HOME)/ipp
	CUDA_HOME=$(HOME)/local/cuda-10.0/
	CC := $(MPI_HOME)/bin64/mpicc
	CXX := $(MPI_HOME)/bin64/mpicxx
	LD := $(CXX)
#################################
endif

$(info HOME = $(HOME), HOST_ARCH = $(HOST_ARCH)ï¼ŒHOST_OS = $(HOST_OS))
$(info $(shell $(CXX) --version | head -n 1))
$(info PATH=$(shell echo $(PATH)))
$(info INTEL_HOME = $(INTEL_HOME))
$(info MPI_HOME = $(MPI_HOME))
$(info IPP_HOME = $(IPP_HOME))
###############################################################################


ifneq ($(CONFIGURATION_LINKER_SCRIPT),)
LINKER_SCRIPT := $(CONFIGURATION_LINKER_SCRIPT)
endif

ifneq ($(LINKER_SCRIPT),)
LDFLAGS += -T$(LINKER_SCRIPT)
endif

ifeq ($(BINARYDIR),)
error:
	$(error Invalid configuration, please check your inputs)
endif

SOURCEFILES := ../cudaBp/StreamingBackprojection.cpp main.cpp main_fbp.cpp mpiFBP.cpp ../cudaBp/backprojection.cu
EXTERNAL_LIBS := 
EXTERNAL_LIBS_COPIED := $(foreach lib, $(EXTERNAL_LIBS),$(BINARYDIR)/$(notdir $(lib)))

#################################
$(info SOURCEFILES = $(SOURCEFILES))
SRCFILES := $(filter %.cu %.cuh,$(SOURCEFILES)) $(filter-out %.cu %.cuh,$(SOURCEFILES))
$(info Reordered SOURCEFILES = $(SRCFILES))
#################################

NVCC := $(CUDA_HOME)/bin/nvcc
#CXXFLAGS := -std=c++11 -Wall
sm := 60 70
ARCHITECTURE=$(foreach s,$(sm), -gencode arch=compute_$(s),code=sm_$(s))
#$(info ARCHITECTURE = $(ARCHITECTURE))
#NVCCFLAGS +=--std=c++11 -m64 -Xcompiler -Wall -Xptxas -v -Wno-deprecated-gpu-targets -w
NVCCFLAGS += -std=c++11 -m64 -Xcompiler -fopenmp -Xcompiler -Wall -Wno-deprecated-gpu-targets -w 
NVCCFLAGS += $(ARCHITECTURE)
#NVCC_LDFLAGS = -lcudart -lcufft -L$(CUDA_HOME)/lib64
#################################

INCLUDE_DIRS += $(IPP_HOME)/include $(MPI_HOME)/include64 $(CUDA_HOME)/include ../common 
LIBRARY_DIRS += $(MPI_HOME)/lib64 $(IPP_HOME)/lib/intel64 $(CUDA_HOME)/lib64
LIBRARY_DIRS += 
LIBRARY_NAMES += ippi ipps ippcore ippvm cudart
COMMONFLAGS += -fpermissive -fopenmp -lpthread -std=c++11 -msse4.1 -w 
#################################



$(info CC = $(CC))
$(info CXX = $(CXX))
$(info LD = $(LD))

CFLAGS += $(COMMONFLAGS)
CXXFLAGS += $(COMMONFLAGS)
ASFLAGS += $(COMMONFLAGS)
LDFLAGS += $(COMMONFLAGS)

CFLAGS += $(addprefix -I,$(INCLUDE_DIRS))
CXXFLAGS += $(addprefix -I,$(INCLUDE_DIRS))

CFLAGS += $(addprefix -D,$(PREPROCESSOR_MACROS))
CXXFLAGS += $(addprefix -D,$(PREPROCESSOR_MACROS))
ASFLAGS += $(addprefix -D,$(PREPROCESSOR_MACROS))

CXXFLAGS += $(addprefix -framework ,$(MACOS_FRAMEWORKS))
CFLAGS += $(addprefix -framework ,$(MACOS_FRAMEWORKS))
LDFLAGS += $(addprefix -framework ,$(MACOS_FRAMEWORKS))

LDFLAGS += $(addprefix -L,$(LIBRARY_DIRS))

ifeq ($(GENERATE_MAP_FILE),1)
LDFLAGS += -Wl,-Map=$(BINARYDIR)/$(basename $(TARGETNAME)).map
endif

LIBRARY_LDFLAGS = $(addprefix -l,$(LIBRARY_NAMES))

ifeq ($(IS_LINUX_PROJECT),1)
	RPATH_PREFIX := -Wl,--rpath='$$ORIGIN/../
	LIBRARY_LDFLAGS += $(EXTERNAL_LIBS)
	LIBRARY_LDFLAGS += -Wl,--rpath='$$ORIGIN'
	LIBRARY_LDFLAGS += $(addsuffix ',$(addprefix $(RPATH_PREFIX),$(dir $(EXTERNAL_LIBS))))
	
	ifeq ($(TARGETTYPE),SHARED)
		CFLAGS += -fPIC
		CXXFLAGS += -fPIC
		ASFLAGS += -fPIC
		LIBRARY_LDFLAGS += -Wl,-soname,$(TARGETNAME)
	endif
	
	ifneq ($(LINUX_PACKAGES),)
		PACKAGE_CFLAGS := $(foreach pkg,$(LINUX_PACKAGES),$(shell pkg-config --cflags $(pkg)))
		PACKAGE_LDFLAGS := $(foreach pkg,$(LINUX_PACKAGES),$(shell pkg-config --libs $(pkg)))
		CFLAGS += $(PACKAGE_CFLAGS)
		CXXFLAGS += $(PACKAGE_CFLAGS)
		LIBRARY_LDFLAGS += $(PACKAGE_LDFLAGS)
	endif	
else
	LIBRARY_LDFLAGS += $(EXTERNAL_LIBS)
endif

LIBRARY_LDFLAGS += $(ADDITIONAL_LINKER_INPUTS)

all_make_files := $(firstword $(MAKEFILE_LIST)) $(CONFIGURATION_FLAGS_FILE) $(ADDITIONAL_MAKE_FILES)

ifeq ($(STARTUPFILES),)
	all_source_files := $(SRCFILES)
else
	all_source_files := $(STARTUPFILES) $(filter-out $(STARTUPFILES),$(SRCFILES))
endif

source_obj1 := $(all_source_files:.cpp=.o)
source_obj2 := $(source_obj1:.c=.o)
source_obj3 := $(source_obj2:.s=.o)
source_obj4 := $(source_obj3:.S=.o)
source_obj5 := $(source_obj4:.cc=.o)
source_obj6 := $(source_obj5:.cxx=.o)
source_objs := $(source_obj6:.cu=.o)

all_objs := $(addprefix $(BINARYDIR)/, $(notdir $(source_objs)))

PRIMARY_OUTPUTS :=

ifeq ($(GENERATE_BIN_FILE),1)
PRIMARY_OUTPUTS += $(BINARYDIR)/$(basename $(TARGETNAME)).bin
endif

ifeq ($(GENERATE_IHEX_FILE),1)
PRIMARY_OUTPUTS += $(BINARYDIR)/$(basename $(TARGETNAME)).ihex
endif

ifeq ($(PRIMARY_OUTPUTS),)
PRIMARY_OUTPUTS := $(BINARYDIR)/$(TARGETNAME)
endif

all: $(PRIMARY_OUTPUTS)
	(chmod +x *.sh && sed -i 's/\r//g' *.sh;) | true
	(cd abci.jobs; chmod +x *.sh && sed -i 's/\r//g' *.sh;) | true

$(BINARYDIR)/$(basename $(TARGETNAME)).bin: $(BINARYDIR)/$(TARGETNAME)
	$(OBJCOPY) -O binary $< $@

$(BINARYDIR)/$(basename $(TARGETNAME)).ihex: $(BINARYDIR)/$(TARGETNAME)
	$(OBJCOPY) -O ihex $< $@
	
ifneq ($(LINKER_SCRIPT),)
$(BINARYDIR)/$(TARGETNAME): $(LINKER_SCRIPT)
endif

ifeq ($(TARGETTYPE),APP)
$(BINARYDIR)/$(TARGETNAME): $(all_objs) $(EXTERNAL_LIBS)
	$(LD) -o $@ $(LDFLAGS) $(START_GROUP) $(all_objs) $(LIBRARY_LDFLAGS) $(END_GROUP)
endif

ifeq ($(TARGETTYPE),SHARED)
$(BINARYDIR)/$(TARGETNAME): $(all_objs) $(EXTERNAL_LIBS)
	$(LD) -shared -o $@ $(LDFLAGS) $(START_GROUP) $(all_objs) $(LIBRARY_LDFLAGS) $(END_GROUP)
endif
	
ifeq ($(TARGETTYPE),STATIC)
$(BINARYDIR)/$(TARGETNAME): $(all_objs)
	$(AR) -r $@ $^
endif

-include $(all_objs:.o=.dep)

clean:
ifeq ($(USE_DEL_TO_CLEAN),1)
	cmd /C del /S /Q $(BINARYDIR)
else
	rm -rf $(BINARYDIR)
endif

$(BINARYDIR):
	mkdir $(BINARYDIR)

#VisualGDB: FileSpecificTemplates		#<--- VisualGDB will use the following lines to define rules for source files in subdirectories
$(BINARYDIR)/%.o : %.cpp $(all_make_files) |$(BINARYDIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.c $(all_make_files) |$(BINARYDIR)
	$(CC) $(CFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.S $(all_make_files) |$(BINARYDIR)
	$(CC) $(CFLAGS) $(ASFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.s $(all_make_files) |$(BINARYDIR)
	$(CC) $(CFLAGS) $(ASFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.cc $(all_make_files) |$(BINARYDIR)
	$(CC) $(CFLAGS) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.cxx $(all_make_files) |$(BINARYDIR)
	$(CC) $(CFLAGS) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.cu $(all_make_files) |$(BINARYDIR) 
	$(NVCC) $(NVCCFLAGS) $(INCS) -c $< -o $@
#VisualGDB: GeneratedRules				#<--- All lines below are auto-generated. Remove this line to suppress auto-generation of file rules.


$(BINARYDIR)/StreamingBackprojection.o : ../cudaBp/StreamingBackprojection.cpp $(all_make_files) |$(BINARYDIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)


$(BINARYDIR)/backprojection.o : ../cudaBp/backprojection.cu $(all_make_files) |$(BINARYDIR) 
	$(NVCC) $(NVCCFLAGS) $(INCS) -c $< -o $@

